// Generated by Apple Swift version 4.2 (swiftlang-1000.11.37.1 clang-1000.11.45.1)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if __has_feature(modules)
@import CoreData;
@import CoreGraphics;
@import Dispatch;
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="ContactAtOnceMessaging",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

typedef SWIFT_ENUM(NSInteger, CheckmarksState, closed) {
  CheckmarksStateSentOnly = 1,
  CheckmarksStateSentAndAccepted = 2,
  CheckmarksStateAll = 3,
};

@class LPConversationEntity;
@class NSPredicate;

SWIFT_PROTOCOL("_TtP22ContactAtOnceMessaging25ConversationParamProtocol_")
@protocol ConversationParamProtocol
- (NSArray<LPConversationEntity *> * _Nullable)getConversations SWIFT_WARN_UNUSED_RESULT;
- (NSArray<LPConversationEntity *> * _Nullable)getConversations:(NSPredicate * _Nullable)predicate SWIFT_WARN_UNUSED_RESULT;
- (NSArray<LPConversationEntity *> * _Nullable)getClosedConversations SWIFT_WARN_UNUSED_RESULT;
- (LPConversationEntity * _Nullable)getActiveConversation SWIFT_WARN_UNUSED_RESULT;
- (LPConversationEntity * _Nullable)getOpenConversation SWIFT_WARN_UNUSED_RESULT;
- (NSArray<LPConversationEntity *> * _Nullable)getLatestClosedConversation:(NSInteger)conversationsCount SWIFT_WARN_UNUSED_RESULT;
- (LPConversationEntity * _Nonnull)createNewConversation SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getQueryType SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isConversationRelatedToQuery:(LPConversationEntity * _Nonnull)conversation SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getBrandID SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getBrandName SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getQueryUID SWIFT_WARN_UNUSED_RESULT;
- (NSDictionary<NSString *, id> * _Nonnull)getQueryProperties SWIFT_WARN_UNUSED_RESULT;
@end

@protocol UIAdapterDelegate;

SWIFT_PROTOCOL("_TtP22ContactAtOnceMessaging39ConversationViewControllerAgentDelegate_")
@protocol ConversationViewControllerAgentDelegate
@optional
- (void)agentDidChangeUserInputText:(NSString * _Nonnull)text;
- (void)setUIAdapterDelegate:(id <UIAdapterDelegate> _Nonnull)delegate;
@end

typedef SWIFT_ENUM(NSInteger, LPAccountEnviroment, closed) {
  LPAccountEnviromentProduction = 0,
  LPAccountEnviromentAlpha = 1,
  LPAccountEnviromentQa = 2,
};

typedef SWIFT_ENUM(NSInteger, LPConversationCloseReason, closed) {
  LPConversationCloseReasonAgent = 0,
  LPConversationCloseReasonConsumer = 1,
  LPConversationCloseReasonSystem = 2,
};

@class NSEntityDescription;
@class NSManagedObjectContext;

SWIFT_CLASS("_TtC22ContactAtOnceMessaging20LPConversationEntity")
@interface LPConversationEntity : NSManagedObject
@property (nonatomic, copy) NSString * _Nullable lastMessage;
@property (nonatomic, copy) NSDate * _Nullable lastMessageDate;
@property (nonatomic, copy) NSString * _Nullable consumerId;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)initWithEntity:(NSEntityDescription * _Nonnull)entity insertIntoManagedObjectContext:(NSManagedObjectContext * _Nullable)context OBJC_DESIGNATED_INITIALIZER;
@end

@class LPMessageEntity;

@interface LPConversationEntity (SWIFT_EXTENSION(ContactAtOnceMessaging))
@property (nonatomic, readonly, copy) NSArray<LPMessageEntity *> * _Nonnull unreadMessages;
@end

@class UIViewController;

SWIFT_CLASS("_TtC22ContactAtOnceMessaging24LPConversationViewParams")
@interface LPConversationViewParams : NSObject
- (nonnull instancetype)initWithConversationQuery:(id <ConversationParamProtocol> _Nonnull)conversationQuery containerViewController:(UIViewController * _Nullable)containerViewController isViewOnly:(BOOL)isViewOnly OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

/// All SDK supported languages
/// The enum contains general languages and specific if exists.
/// For example: Portuguese from ‘pt’ folder will be used for all regions when the language is Portuguese. Portuguese from ‘pt-PT’ folder will be used for Portugal region only when the language is Portuguese (Portugal)
typedef SWIFT_ENUM(NSInteger, LPLanguage, closed) {
  LPLanguageDevice = 0,
  LPLanguageEn = 1,
  LPLanguageEn_GB = 2,
  LPLanguagePt = 3,
  LPLanguagePt_PT = 4,
  LPLanguageFr = 5,
  LPLanguageBg = 6,
  LPLanguageCs = 7,
  LPLanguageDa = 8,
  LPLanguageSr = 9,
  LPLanguageDe = 10,
  LPLanguageEl = 11,
  LPLanguageHe = 12,
  LPLanguageHe_IL = 13,
  LPLanguageEs = 14,
  LPLanguageEt = 15,
  LPLanguageFi = 16,
  LPLanguageHi = 17,
  LPLanguageHr = 18,
  LPLanguageHu = 19,
  LPLanguageIt = 20,
  LPLanguageJa = 21,
  LPLanguageKo = 22,
  LPLanguageLt = 23,
  LPLanguageLv = 24,
  LPLanguageMk = 25,
  LPLanguageNb = 26,
  LPLanguageNl = 27,
  LPLanguagePl = 28,
  LPLanguageRo = 29,
  LPLanguageRu = 30,
  LPLanguageSl = 31,
  LPLanguageSk = 32,
  LPLanguageSv = 33,
  LPLanguageTh = 34,
  LPLanguageTr = 35,
  LPLanguageUk = 36,
  LPLanguageVi = 37,
  LPLanguageZh = 38,
  LPLanguageZh_Hans = 39,
  LPLanguageZh_Hant_hk = 40,
};


SWIFT_CLASS("_TtC22ContactAtOnceMessaging5LPLog")
@interface LPLog : NSObject
@property (nonatomic, copy) NSString * _Nullable timestamp;
@property (nonatomic, copy) NSString * _Nullable className;
@property (nonatomic, copy) NSString * _Nullable funcName;
@property (nonatomic, copy) NSString * _Nullable text;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC22ContactAtOnceMessaging15LPMessageEntity")
@interface LPMessageEntity : NSManagedObject
@property (nonatomic, copy) NSString * _Nonnull content;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)initWithEntity:(NSEntityDescription * _Nonnull)entity insertIntoManagedObjectContext:(NSManagedObjectContext * _Nullable)context OBJC_DESIGNATED_INITIALIZER;
@end




SWIFT_CLASS("_TtC22ContactAtOnceMessaging11LPOperation")
@interface LPOperation : NSOperation
@property (nonatomic, getter=isExecuting) BOOL executing;
@property (nonatomic, getter=isFinished) BOOL finished;
@property (nonatomic, readonly, getter=isAsynchronous) BOOL asynchronous;
- (void)main;
- (void)start;
- (void)cancel;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, LPPermissionTypes, closed) {
  LPPermissionTypesLocation = 0,
  LPPermissionTypesContacts = 1,
  LPPermissionTypesCalendars = 2,
  LPPermissionTypesReminders = 3,
  LPPermissionTypesPhotos = 4,
  LPPermissionTypesBluetooth = 5,
  LPPermissionTypesMicrophone = 6,
  LPPermissionTypesSpeechRecognition = 7,
  LPPermissionTypesCamera = 8,
  LPPermissionTypesHealth = 9,
  LPPermissionTypesHomekit = 10,
  LPPermissionTypesMediaLibrary = 11,
  LPPermissionTypesMotionAndFitness = 12,
};

@class NSCoder;

SWIFT_CLASS("_TtC22ContactAtOnceMessaging19LPRadialProgressBar")
@interface LPRadialProgressBar : UIView
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end

typedef SWIFT_ENUM(NSInteger, LPUrlPreviewStyle, closed) {
  LPUrlPreviewStyleSlim = 0,
  LPUrlPreviewStyleLarge = 1,
};

@class LPUserEntity;

SWIFT_CLASS("_TtC22ContactAtOnceMessaging6LPUser")
@interface LPUser : NSObject
@property (nonatomic, copy) NSString * _Nullable firstName;
@property (nonatomic, copy) NSString * _Nullable lastName;
@property (nonatomic, copy) NSString * _Nullable nickName;
@property (nonatomic, copy) NSString * _Nullable profileImageURL;
@property (nonatomic, copy) NSString * _Nullable phoneNumber;
@property (nonatomic, copy) NSString * _Nullable employeeID;
@property (nonatomic, copy) NSString * _Nullable uid;
- (nonnull instancetype)initWithUser:(LPUserEntity * _Nonnull)user;
- (nonnull instancetype)initWithFirstName:(NSString * _Nullable)firstName lastName:(NSString * _Nullable)lastName nickName:(NSString * _Nullable)nickName uid:(NSString * _Nullable)uid profileImageURL:(NSString * _Nullable)profileImageURL phoneNumber:(NSString * _Nullable)phoneNumber employeeID:(NSString * _Nullable)employeeID OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC22ContactAtOnceMessaging12LPUserEntity")
@interface LPUserEntity : NSManagedObject
- (nonnull instancetype)initWithEntity:(NSEntityDescription * _Nonnull)entity insertIntoManagedObjectContext:(NSManagedObjectContext * _Nullable)context OBJC_DESIGNATED_INITIALIZER;
@end




SWIFT_CLASS("_TtC22ContactAtOnceMessaging16LanguagesManager")
@interface LanguagesManager : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) LanguagesManager * _Nonnull instance;)
+ (LanguagesManager * _Nonnull)instance SWIFT_WARN_UNUSED_RESULT;
/// Get all supported languages by key-value (key is locale key and value is language description), call the following:
+ (NSDictionary<NSString *, NSString *> * _Nonnull)getAllSupportedLanguages SWIFT_WARN_UNUSED_RESULT;
/// Get the language to use in SDK from native preferred language
/// <ol>
///   <li>
///     Get the first object from preferredLanguages and try to find it in our supported languages enum. If found, set it as default
///   </li>
///   <li>
///     If the language not found, try to take only the language itself (without the region) and do the same. If found, set it as default
///   </li>
///   <li>
///     If nothing found - set “en” as default language
///   </li>
/// </ol>
+ (NSString * _Nonnull)sdkLanguageFromLocalePreferredLanguage SWIFT_WARN_UNUSED_RESULT;
@end

typedef SWIFT_ENUM(NSInteger, LogLevel, closed) {
  LogLevelTrace = 0,
  LogLevelDebug = 1,
  LogLevelInfo = 2,
  LogLevelWarning = 3,
  LogLevelError = 4,
  LogLevelOff = 5,
};


SWIFT_CLASS("_TtC22ContactAtOnceMessaging12NSBouncyView")
@interface NSBouncyView : UIView
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end












SWIFT_CLASS("_TtC22ContactAtOnceMessaging22RemoteUserIsTypingView")
@interface RemoteUserIsTypingView : UIView
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)awakeFromNib;
@end


SWIFT_CLASS("_TtC22ContactAtOnceMessaging4Ring")
@interface Ring : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC22ContactAtOnceMessaging5Toast")
@interface Toast : UIView
- (void)awakeFromNib;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC22ContactAtOnceMessaging7Toaster")
@interface Toaster : UIView
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end

@class UITextView;
@class UIColor;
@class UIImage;
@class UIGestureRecognizer;

SWIFT_PROTOCOL("_TtP22ContactAtOnceMessaging17UIAdapterDelegate_")
@protocol UIAdapterDelegate
@optional
- (BOOL)sendClickedWithMessage:(NSString * _Nonnull)message inConversation:(LPConversationEntity * _Nonnull)inConversation SWIFT_WARN_UNUSED_RESULT;
- (void)executeActionAtIndex:(UIViewController * _Nonnull)viewController index:(NSInteger)index conversation:(LPConversationEntity * _Nullable)conversation complition:(void (^ _Nonnull)(void))complition;
- (void)textViewDidBeginEditingWithConversation:(LPConversationEntity * _Nullable)conversation;
- (void)textViewDidEndEditingWithConversation:(LPConversationEntity * _Nullable)conversation;
- (BOOL)textView:(UITextView * _Nonnull)textView shouldChangeTextInRange:(NSRange)range replacementText:(NSString * _Nonnull)text conversation:(LPConversationEntity * _Nullable)conversation SWIFT_WARN_UNUSED_RESULT;
- (BOOL)shouldSetUIReadOnly:(LPConversationEntity * _Nullable)conversation SWIFT_WARN_UNUSED_RESULT;
- (UIColor * _Nonnull)getTableViewBackgroundColor:(id <ConversationParamProtocol> _Nonnull)conversationQuery SWIFT_WARN_UNUSED_RESULT;
- (UIImage * _Nonnull)getDefaultRecepientAvatarImage:(id <ConversationParamProtocol> _Nonnull)conversationQuery SWIFT_WARN_UNUSED_RESULT;
- (UIGestureRecognizer * _Nonnull)getTableViewCustomGestureRecognizer SWIFT_WARN_UNUSED_RESULT;
@end


































SWIFT_CLASS("_TtC22ContactAtOnceMessaging5Utils")
@interface Utils : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) dispatch_queue_t _Nonnull backgroundQueue;)
+ (dispatch_queue_t _Nonnull)backgroundQueue SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nullable)JSONStringify:(NSDictionary<NSString *, id> * _Nonnull)value prettyPrinted:(BOOL)prettyPrinted SWIFT_WARN_UNUSED_RESULT;
+ (NSDictionary<NSString *, id> * _Nullable)JSONDictionaryFromString:(NSString * _Nonnull)string SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)formatDate:(NSDate * _Nonnull)date SWIFT_WARN_UNUSED_RESULT;
+ (id _Nonnull)unwrapWithAny:(id _Nonnull)any SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
